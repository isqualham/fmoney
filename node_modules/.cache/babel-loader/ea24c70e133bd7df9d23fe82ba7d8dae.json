{"ast":null,"code":"var _jsxFileName = \"C:\\\\Isqualham\\\\reactJS\\\\fmoney\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport Modal from 'react-modal';\nimport { useState } from 'react';\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from './components/NewTransactionModal';\nimport { TransactionsContext } from './TransactionsContext';\nimport { GlobalStyle } from \"./styles/global\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nexport function App() {\n  _s();\n\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: [],\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onOpenNewTransactionModal: handleOpenNewTransactionModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(NewTransactionModal, {\n      isOpen: isNewTransactionModalOpen,\n      onRequestClose: handleCloseNewTransactionModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YWa5Wmz82gI4ha22AwMdN+zJHN8=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Isqualham/reactJS/fmoney/src/App.tsx"],"names":["Modal","useState","Dashboard","Header","NewTransactionModal","TransactionsContext","GlobalStyle","setAppElement","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","handleOpenNewTransactionModal","handleCloseNewTransactionModal"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAAQC,mBAAR,QAAkC,uBAAlC;AACA,SAASC,WAAT,QAA4B,iBAA5B;;AAEAN,KAAK,CAACO,aAAN,CAAoB,OAApB;AAEA,OAAO,SAASC,GAAT,GAAe;AAAA;;AACpB,QAAM,CAACC,yBAAD,EAA4BC,4BAA5B,IAA4DT,QAAQ,CAAC,KAAD,CAA1E;;AAEE,WAASU,6BAAT,GAAyC;AACrCD,IAAAA,4BAA4B,CAAC,IAAD,CAA5B;AACH;;AAED,WAASE,8BAAT,GAA0C;AACtCF,IAAAA,4BAA4B,CAAC,KAAD,CAA5B;AACH;;AAEH,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE,EAArC;AAAA,4BAEI,QAAC,MAAD;AAAQ,MAAA,yBAAyB,EAAEC;AAAnC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAHJ,eAKI,QAAC,mBAAD;AACE,MAAA,MAAM,EAAEF,yBADV;AAEE,MAAA,cAAc,EAAEG;AAFlB;AAAA;AAAA;AAAA;AAAA,YALJ,eAUE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAzBeJ,G;;KAAAA,G","sourcesContent":["import Modal from 'react-modal';\nimport { useState } from 'react';\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from './components/NewTransactionModal';\nimport {TransactionsContext} from './TransactionsContext'\nimport { GlobalStyle } from \"./styles/global\";\n\nModal.setAppElement('#root');\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n    function handleOpenNewTransactionModal() {\n        setIsNewTransactionModalOpen(true);\n    }\n\n    function handleCloseNewTransactionModal() {\n        setIsNewTransactionModalOpen(false);\n    }\n\n  return (\n    <TransactionsContext.Provider value={[]}>\n\n        <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n        <Dashboard />\n\n        <NewTransactionModal \n          isOpen={isNewTransactionModalOpen}\n          onRequestClose={handleCloseNewTransactionModal}\n        />\n\n      <GlobalStyle />\n    </TransactionsContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}